{{!-- Use the main layout --}}
{{!< main }}

<section class="content-container">
    {{#if loggedIn}}
        <section class="post-form">
            <h2>Create a New Post</h2>
            <form action="/posts" method="POST">
                <label for="title">Title:</label>
                <input type="text" id="title" name="title" required>
                <br>
                <label for="content">Content:</label>
                <textarea id="content" name="content" required></textarea>
                <br>
                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>
            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input type="text" id="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()">
                <div id="emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    <section class="posts-list">
        <h2>Recent Posts</h2>
        {{#if posts.length}}
        <ul>
            {{#each posts}}
                <li>
                    {{> post this user=../user}}
                    <div class="comments">
                        <h4>Comments:</h4>
                        {{#if this.comments.length}}
                            <ul>
                                {{#each this.comments}}
                                    <li>{{this.username}}: {{this.content}} ({{formatDate this.timestamp}})</li>
                                {{/each}}
                            </ul>
                        {{else}}
                            <p>No comments yet. Be the first to comment!</p>
                        {{/if}}
                        {{#if ../user}}
                        <form action="/comment/{{this.id}}" method="POST">
                            <textarea name="content" required></textarea>
                            <button type="submit">Comment</button>
                        </form>
                        {{else}}
                        <p>You must be logged in to comment.</p>
                        {{/if}}
                    </div>
                </li>
            {{/each}}
        </ul>
        {{else}}
            <p>No posts available. Be the first to post something!</p>
        {{/if}}
    </section>
</section>

{{!-- JavaScript for Emoji Integration --}}
<script>

let allEmojis = [];  // Global list to hold all emojis

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    if (container.style.display === 'block' && allEmojis.length === 0) {
        fetch('https://emoji-api.com/emojis?access_key=39b9075398a893f76b30d88b19e81271015d31f5')
            .then(response => response.json())
            .then(data => {
                allEmojis = data;
                displayEmojis(allEmojis);
            })
            .catch(error => console.error('Error fetching emojis:', error));
    }
}

function displayEmojis(emojis, limit = 200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.toLowerCase().includes(searchTerm));
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const textarea = document.getElementById('content');
    const startPos = textarea.selectionStart;
    const endPos = textarea.selectionEnd;
    const textBefore = textarea.value.substring(0, startPos);
    const textAfter = textarea.value.substring(endPos, textarea.value.length);
    textarea.value = textBefore + emoji + textAfter;
    textarea.setSelectionRange(startPos + emoji.length, startPos + emoji.length);
    textarea.focus();  // Keep focus on the textarea
}

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', handleLikeClick);
    });

    document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', handleDeleteClick);
    });
});

function handleLikeClick(event) {
    event.preventDefault();
    const postId = event.target.getAttribute('data-id');
    fetch(`/like/${postId}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.likes !== undefined) {
                document.querySelector(`#post-${postId} .like-count`).textContent = `Likes: ${data.likes}`;
            } else {
                alert('You cannot like your own post');
            }
        })
        .catch(error => console.error('Error liking post:', error));
}

function handleDeleteClick(event) {
    event.preventDefault();
    const postId = event.target.getAttribute('data-id');
    fetch(`/delete/${postId}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.querySelector(`#post-${postId}`).remove();
            } else {
                alert('You can only delete your own posts');
            }
        })
        .catch(error => console.error('Error deleting post:', error));
}

</script>
